// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  PromptTemplate PromptTemplate[]
  Chatbot        Chatbot[]
  AccessToken    AccessToken[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PromptTemplate {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  prompt    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  inputs    Json
  name      String
  Chatbot   Chatbot[]
}

model Chatbot {
  id               Int              @id @default(autoincrement())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  promptTemplate   PromptTemplate?  @relation(fields: [promptTemplateId], references: [id], onDelete: Cascade)
  promptTemplateId Int?
  name             String
  ChatbotMessage   ChatbotMessage[]
}

model ChatbotMessage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chatbot   Chatbot? @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  chatbotId Int?
  message   String   @db.VarChar()
  agent     String
}

model AccessToken {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  token  String
  name   String
}
